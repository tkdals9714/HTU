package kr.or.ddit.util;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.mapper.NotificationMapper;
import kr.or.ddit.vo.NotificationVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Component
@RequestMapping("/echo")
@RequiredArgsConstructor
@Slf4j
public class EchoHandler extends TextWebSocketHandler {
	
	private final NotificationMapper notificationMapper;
	
	private List<WebSocketSession> sessions = new ArrayList<WebSocketSession>();
	
	// 연결 성공 시 실행되는 메소드, 클라이언트가 웹소켓 생성
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		
		log.info("Socket 연결, 사용자 id = {}", session.getPrincipal().getName());
		
		sessions.add(session);
	}
	
	// JS 에서 메세지를 받았을 때
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		
		String userCd = session.getPrincipal().getName();
		
		log.info(message.getPayload());
		
		
		for (WebSocketSession single : sessions) {
			
			String usedUserCd = single.getPrincipal().getName();
			
			
			
			// 세션값이 같을때, 알람보낼 것이 있을때만 전송 ==> 로그인 한 사용자가 처음으로 알람을 받는 순간
			// 해당 sendMsg에 DB정보 넣어서 체크 안된 알람 전부 전송하기
			if (usedUserCd.equals(userCd)) {
				
				List<NotificationVO> ntfList = this.notificationMapper.getNotificationsByUserCd(userCd);
				
				ObjectMapper objectMapper = new ObjectMapper();
				
				for (NotificationVO ntf : ntfList) {
					TextMessage sendMsg = new TextMessage(objectMapper.writeValueAsString(ntf));
					single.sendMessage(sendMsg);
				}
			}
		}
	}
	
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		
		log.info("Socket 종료, 사용자 id = {}", session.getPrincipal().getName());
		sessions.remove(session);
		
	}
	
	public static String setNotification(String userCd) {
		return "null";
	}

}
