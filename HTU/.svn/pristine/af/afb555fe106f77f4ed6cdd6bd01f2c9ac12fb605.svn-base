package kr.or.ddit.util;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import org.springframework.security.core.context.SecurityContextImpl;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import kr.or.ddit.mapper.NotificationMapper;
import kr.or.ddit.security.CustomUser;
import kr.or.ddit.vo.NotificationVO;
import kr.or.ddit.vo.UserVO;
import lombok.RequiredArgsConstructor;
import lombok.val;
import lombok.extern.slf4j.Slf4j;

@Component
@RequestMapping("/echo")
@RequiredArgsConstructor
@Slf4j
public class EchoHandler extends TextWebSocketHandler {
	
	private final NotificationMapper notificationMapper;
	
	private List<WebSocketSession> sessions = new ArrayList<WebSocketSession>();
	
	// 연결 성공 시 실행되는 메소드, 클라이언트가 웹소켓 생성
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		
		log.info("Socket 연결, 연결ip : {}\n사용자 id : {}", session.getLocalAddress(), session.getAttributes().get("user_id"));
		
		sessions.add(session);
	}
	
	// JS 에서 메세지를 받았을 때
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		
		for (WebSocketSession single : sessions) {
			
			single.getAttributes().forEach((key, value) -> {
				log.warn("key => {}", key);
				//value => org.springframework.security.core.context.SecurityContextImpl@7b749734: 
				//Authentication: org.springframework.security.authentication.UsernamePasswordAuthenticationToken@7b749734: 
				//Principal: kr.or.ddit.security.CustomUser@5667733e: 
				//Username: 112275; Password: [PROTECTED]; Enabled: true; 
				//AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; 
				//Granted Authorities: ROLE_STUDENT; Credentials: [PROTECTED]; Authenticated: true; 
				//Details: org.springframework.security.web.authentication.WebAuthenticationDetails@ffff4c9c: 
				//RemoteIpAddress: 0:0:0:0:0:0:0:1; SessionId: A374433CA2B38E9D1C52FE9F5CF06931; 
				//Granted Authorities: ROLE_STUDENT
				log.warn("value => {}", value);
				
				if(key.equals("SPRING_SECURITY_CONTEXT")) {
					//value.getClass() : org.springframework.security.core.context.SecurityContextImpl
					SecurityContextImpl test = (SecurityContextImpl)value;
					CustomUser user = (CustomUser) test.getAuthentication().getPrincipal();
					log.info("id : " + user.getUsername());
				}
			});
			
			
			// 세션 아이디?
//			String user_id = (String) single.getAttributes().get("user_id");
//			
//			// 세션값이 같을때, 알람보낼 것이 있을때만 전송 ==> 로그인 한 사용자가 처음으로 알람을 받는 순간
//			// 해당 sendMsg에 DB정보 넣어서 체크 안된 알람 전부 전송하기
//			if (single.getAttributes().get("user_id").equals(session.getAttributes().get("user_id"))) {
//				
//				List<NotificationVO> ntfList = this.notificationMapper.getNotificationsByUserCd(user_id);
//				
//				for (NotificationVO ntf : ntfList) {
//					TextMessage sendMsg = new TextMessage(ntf + "");
//					single.sendMessage(sendMsg);
//				}
//			}
		}
	}
	
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		
		log.info("Socket 종료, 사용자 id = {}", session.getAttributes().get("userCd"));
		sessions.remove(session);
		
	}

}
